//
//  EventsInteractor.swift
//  YesplanCS
//
//  Created by Techcc - FOH - Video on 24/03/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol EventsBusinessLogic
{
  func fetchEvents(request: Events.FetchEvents.Request)
    func fetchStatuses(request: Statuses.FetchStatuses.Request)
}

protocol EventsDataStore
{
  //var name: String { get set }
    var events: [Event] { get }
    var statuses: [Status] { get }

}

class EventsInteractor: EventsBusinessLogic, EventsDataStore
{
    
    
  var presenter: EventsPresentationLogic?
  var worker: EventsWorker?
  //var name: String = ""
  
    var events: [Event] = []
    var tasks: [Task] = []
    var statuses: [Status] = []
    
  // MARK: Do something
  
  func fetchEvents(request: Events.FetchEvents.Request)
  {
    worker = EventsWorker()
    worker?.doLoadEvents() { (yesplanResult) -> Void in

//        print("yesplanResult.pagination: ", yesplanResult.pagination)
        
        for datum in yesplanResult.data {
            switch datum {
                case .event(let x):
                    self.events.append(x)
                default:
                    print("default")
            }
        }
        let response = Events.FetchEvents.Response(pagination: yesplanResult.pagination, data: self.events )
    self.presenter?.presentFetchedEvents(response: response)
    }
    
  }
    func fetchStatuses(request: Statuses.FetchStatuses.Request)
    {
        worker = EventsWorker()
        worker?.doLoadStatuses() { (yesplanResult) -> Void in
//            print("yesplanResult: statuses")
            for datum in yesplanResult.data {
                switch datum {
                case .status(let x):
                    self.statuses.append(x)
//                    print("x: ", x.name!)
                default:
                    print("default")
                    
                }
            }
        let response = Statuses.FetchStatuses.Response(pagination: yesplanResult.pagination, data: self.statuses)
        self.presenter?.presentFetchedStatuses(response: response)
        }
    }
}
