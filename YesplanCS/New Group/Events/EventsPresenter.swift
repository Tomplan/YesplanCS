//
//  EventsPresenter.swift
//  YesplanCS
//
//  Created by Techcc - FOH - Video on 24/03/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// protocol
protocol EventsPresentationLogic {
    
    func presentFetchedEvents(response: Events.FetchEvents.Response)
    func presentFetchedStatuses(response: Statuses.FetchStatuses.Response)
}

// class
class EventsPresenter: EventsPresentationLogic {
    
  weak var viewController: EventsDisplayLogic?

    let dateFormatter: DateFormatter = {
        let dateFormatter = DateFormatter()
        let tempLocale = dateFormatter.locale // save locale temporarily
        dateFormatter.locale = Locale(identifier: "nl_BE") // set locale to reliable US_POSIX
        dateFormatter.dateFormat = "yyyy-MM-dd"
//        let date = dateFormatter.date(from: myDateString)!
        dateFormatter.dateFormat = "EEEE, dd MMMM yyyy"
//        let dateString = dateFormatter.string(from: date)
        dateFormatter.locale = tempLocale // reset the locale
        //                    print("EXACT_DATE : \(dateString)")
        return dateFormatter
    }()

  // MARK: Do something
  
    func presentFetchedEvents(response: Events.FetchEvents.Response)
        {
        var displayedEvents: [Events.FetchEvents.ViewModel.DisplayedEvent] = []
//            print("displayedEvents: ", displayedEvents)
            displayedEvents.removeAll()
        for event in response.data {
            
        let url = event.url
        let id = event.id
        let name = event.name ?? "no name"
             // let location = event.locations?.name ?? "no location"
            let location = event.locations?.compactMap { $0.name }.first ?? "no location"
        let startdate = event.startdate ?? "no startdate"
        let defaultschedulestarttime = event.defaultschedulestarttime ?? "no defstarttime"
        let groupName = event.group?.name ?? "no groupName"
            
            let displayedEvent = Events.FetchEvents.ViewModel.DisplayedEvent(id: id, url: url, name: name, location: location, defaultschedulestarttime: defaultschedulestarttime, groupName: groupName, startdate: startdate)
            
            displayedEvents.append(displayedEvent)
        }
            
            // sort Events by defaultschedulestarttime
//            print("displayedEvents: ", displayedEvents)

            displayedEvents.sort(by: { $0.defaultschedulestarttime < $1.defaultschedulestarttime })
            
            
            // group Events by startdate
            var eventsGroupedByDate = Dictionary(grouping: displayedEvents) { (myevent) -> String in
                return myevent.startdate
            }
            
            // sort dictionary by key
            
            var sortedKeysAndValues = eventsGroupedByDate.sorted { $0.key < $1.key }
           
        let viewModel = Events.FetchEvents.ViewModel(displayedEvents: sortedKeysAndValues)
        viewController?.displayFetchedEvents(viewModel: viewModel)
            eventsGroupedByDate.removeAll()
            sortedKeysAndValues.removeAll()
        }
    
    func presentFetchedStatuses(response: Statuses.FetchStatuses.Response)
    {
        var displayedStatuses: [Statuses.FetchStatuses.ViewModel.DisplayedStatus] = []

        for status in response.data {
            let name = status.name
        }
    }
    
//    func doDatePicker()
//    {
//        // DatePicker
//        self.datePicker = UIDatePicker(frame:CGRect(x: 0, y: 0, width: self.view.frame.size.width, height: 260))
//        self.datePicker.backgroundColor = UIColor.darkGray
//        self.datePicker.setValue(UIColor.lightGray, forKeyPath: "textColor")
//        self.datePicker.datePickerMode = UIDatePickerMode.date
//        //        self.datePicker.center = view.center
//        self.datePicker.addTarget(self, action: #selector(dateSelected(datePicker:)), for: UIControlEvents.valueChanged)
//
//        let alertController = UIAlertController(title: "Date Selection", message:" " , preferredStyle: UIAlertControllerStyle.actionSheet)
//
//        alertController.view.addSubview(self.datePicker)//add subview
//
//        let cancelAction = UIAlertAction(title: "Done", style: .cancel) { (action) in
//
//            self.dateSelected(datePicker: self.datePicker)
//
//        }
//
//        alertController.addAction(cancelAction)
//
//        let height:NSLayoutConstraint = NSLayoutConstraint(item: alertController.view, attribute: .height, relatedBy: .equal, toItem: nil, attribute: .notAnAttribute, multiplier: 1, constant: 300)
//        alertController.view.addConstraint(height);
//
//        self.present(alertController, animated: true, completion: nil)
//
//    }
    
    @objc func dateSelected(datePicker:UIDatePicker) {

        let formatter = DateFormatter()
        formatter.dateFormat = "dd-MM-yyyy"
        selectedDateString = formatter.string(from:datePicker.date)
        let selectedEndDate = Calendar.current.date(byAdding: Calendar.Component.day, value: 10, to: datePicker.date)
        selectedEndDateString = formatter.string(from:selectedEndDate!)
        print(selectedDateString)
    }
    
    
    var selectedDateString = ""
    var selectedEndDateString = ""
    
    func GetCurrentDate() {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd-MM-yyyy"
        selectedDateString = formatter.string(from:Date())
        let selectedEndDate = Calendar.current.date(byAdding: Calendar.Component.day, value: 10, to: Date())
        selectedEndDateString = formatter.string(from:selectedEndDate!)
        
    }
    
}
