//
//  TasksViewController.swift
//  YesplanCS
//
//  Created by Techcc - FOH - Video on 24/03/18.
//  Copyright (c) 2018 Yesplan. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TasksDisplayLogic: class
{
    func displayFetchedTasks(viewModel: Tasks.FetchTasks.ViewModel)
    func displayError()

}

class TasksViewController: UIViewController, TasksDisplayLogic
{
  var interactor: TasksBusinessLogic?
  var router: (NSObjectProtocol & TasksRoutingLogic & TasksDataPassing)?
    
    let tasksView = TasksView()
    private var events = [Task]()
    
    var displayedTasks: [Tasks.FetchTasks.ViewModel.DisplayedTask] = []
    
    // Collection view cell
    private let tasksCellIdentifier = "TasksViewCell"
    
    // MARK: - Object lifecycle
    convenience init() {
        self.init(nibName: nil, bundle: nil)
    }
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        setupComponents()
        setupConstraints()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
        setupComponents()
        setupConstraints()
    }
    
    // MARK: - View lifecycle
    override func loadView() {
        view = tasksView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        title = NSLocalizedString("Tasks", comment: String(describing: TasksViewController.self))
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        fetchTasks()
    }
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = TasksInteractor()
    let presenter = TasksPresenter()
    let router = TasksRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
 
    private func setupComponents() {
        // eventsCollectionView
        tasksView.tasksCollectionView.register(TasksViewCell.self, forCellWithReuseIdentifier: tasksCellIdentifier)
        tasksView.tasksCollectionView.delegate = self
        tasksView.tasksCollectionView.dataSource = self
    }
    
    private func setupConstraints() {
        
    }
    
    // MARK: - Private methods
    private func fetchTasks() {
        tasksView.spinner.startAnimating()
        tasksView.spinner.isHidden = false
        
        let request = Tasks.FetchTasks.Request()
        interactor?.fetchTasks(request: request)
    }
    
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }

    // MARK: - Display logic
    func displayFetchedTasks(viewModel: Tasks.FetchTasks.ViewModel) {
        displayedTasks = viewModel.displayedTasks
        tasksView.tasksCollectionView.reloadData()
        tasksView.tasksCollectionView.layoutIfNeeded()
        tasksView.spinner.stopAnimating()
        tasksView.spinner.isHidden = true
    }
    
    func displayError() {
        let alert = UIAlertController(title: "Oops!", message: "Server issue!", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Ok", style: .default, handler: nil))
        
        self.present(alert, animated: true)
    }
}
// MARK: - UICollectionViewDelegate
extension TasksViewController: UICollectionViewDelegate {
    
}

// MARK: - UICollectionViewDataSource
extension TasksViewController: UICollectionViewDataSource {
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        print("displayedTasks.count: ", displayedTasks.count)
        return displayedTasks.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: tasksCellIdentifier, for: indexPath) as! TasksViewCell
        
//        cell.LblEventName.text = displayedTasks[indexPath.item].name
//        cell.LblEventLocation.text = displayedTasks[indexPath.item].location
//        cell.LblEventsDefaultschedulestarttime.text = displayedTasks[indexPath.item].defaultschedulestarttime
//        cell.LblEventGroupName.text = displayedTasks[indexPath.item].groupName
        
        return cell
    }
}

// MARK: - UICollectionViewDelegateFlowLayout
extension TasksViewController: UICollectionViewDelegateFlowLayout {
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let auxWidth = TasksViewCellConstants.width
        let auxHeight = TasksViewCellConstants.height
        
        let width = CGFloat(UIScreen.main.bounds.width / auxWidth)
        let height = CGFloat(UIScreen.main.bounds.width / auxHeight)
        
        let cellSize = CGSize(width: width, height: height)
        return cellSize
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, insetForSectionAt section: Int) -> UIEdgeInsets {
        
        let margin = CGFloat((UIScreen.main.bounds.width / 4.0) / 5.0)
        return UIEdgeInsetsMake(margin, margin, margin, margin)
    }
}
